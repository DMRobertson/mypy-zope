from typing import Callable, Optional, Any

from zope.interface import implementer

from twisted.internet import defer, interfaces
from twisted.internet.interfaces import ITransport
from twisted.python import failure, log


@implementer(interfaces.IProtocolFactory, interfaces.ILoggingContext)
class Factory:
    protocol: "Optional[Callable[[], Protocol]]" = None

    numPorts = 0
    noisy = True

    @classmethod
    def forProtocol(cls, protocol, *args, **kwargs):
        pass

    def logPrefix(self):
        pass

    def doStart(self):
        pass

    def doStop(self):
        pass

    def startFactory(self):
        pass

    def stopFactory(self):
        pass

    def buildProtocol(self, addr: Any) -> "Optional[Protocol]":
        pass


class BaseProtocol:
    connected = 0
    transport: Optional[ITransport] = None

    def makeConnection(self, transport):
        pass

    def connectionMade(self):
        pass


connectionDone = failure.Failure(object())
connectionDone.cleanFailure()


@implementer(interfaces.IProtocol, interfaces.ILoggingContext)
class Protocol(BaseProtocol):
    factory: Optional[Factory] = None

    def logPrefix(self):
        pass

    def dataReceived(self, data: bytes):
        pass

    def connectionLost(self, reason: failure.Failure = connectionDone):
        pass


__all__ = [
    "Factory",
    "connectionDone",
    "Protocol",
]
